// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     email-message.json
 */
package avro

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type EmailMessageSchema struct {
	Id string `json:"Id"`

	Subject string `json:"Subject"`
}

const EmailMessageSchemaAvroCRC64Fingerprint = "\x89k/0!^\xa2w"

func NewEmailMessageSchema() *EmailMessageSchema {
	return &EmailMessageSchema{}
}

func DeserializeEmailMessageSchema(r io.Reader) (*EmailMessageSchema, error) {
	t := NewEmailMessageSchema()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeEmailMessageSchemaFromSchema(r io.Reader, schema string) (*EmailMessageSchema, error) {
	t := NewEmailMessageSchema()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeEmailMessageSchema(r *EmailMessageSchema, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Subject, w)
	if err != nil {
		return err
	}
	return err
}

func (r *EmailMessageSchema) Serialize(w io.Writer) error {
	return writeEmailMessageSchema(r, w)
}

func (r *EmailMessageSchema) Schema() string {
	return "{\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"Subject\",\"type\":\"string\"}],\"name\":\"EmailMessageSchema\",\"type\":\"record\"}"
}

func (r *EmailMessageSchema) SchemaName() string {
	return "EmailMessageSchema"
}

func (_ *EmailMessageSchema) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *EmailMessageSchema) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *EmailMessageSchema) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *EmailMessageSchema) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *EmailMessageSchema) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *EmailMessageSchema) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *EmailMessageSchema) SetString(v string)   { panic("Unsupported operation") }
func (_ *EmailMessageSchema) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EmailMessageSchema) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Id}
	case 1:
		return &types.String{Target: &r.Subject}
	}
	panic("Unknown field index")
}

func (r *EmailMessageSchema) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *EmailMessageSchema) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *EmailMessageSchema) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *EmailMessageSchema) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *EmailMessageSchema) Finalize()                        {}

func (_ *EmailMessageSchema) AvroCRC64Fingerprint() []byte {
	return []byte(EmailMessageSchemaAvroCRC64Fingerprint)
}
