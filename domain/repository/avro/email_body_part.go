// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     email-message.json
 */
package avro

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type EmailBodyPart struct {
	PartId string `json:"PartId"`

	MimeType string `json:"MimeType"`

	Filename string `json:"Filename"`

	Body string `json:"Body"`

	Headers map[string]string `json:"Headers"`
}

const EmailBodyPartAvroCRC64Fingerprint = "\x0f\xbe#\x01\xf1,\xf6\x1d"

func NewEmailBodyPart() *EmailBodyPart {
	return &EmailBodyPart{}
}

func DeserializeEmailBodyPart(r io.Reader) (*EmailBodyPart, error) {
	t := NewEmailBodyPart()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeEmailBodyPartFromSchema(r io.Reader, schema string) (*EmailBodyPart, error) {
	t := NewEmailBodyPart()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeEmailBodyPart(r *EmailBodyPart, w io.Writer) error {
	var err error
	err = vm.WriteString(r.PartId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MimeType, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Filename, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Body, w)
	if err != nil {
		return err
	}
	err = writeMapString(r.Headers, w)
	if err != nil {
		return err
	}
	return err
}

func (r *EmailBodyPart) Serialize(w io.Writer) error {
	return writeEmailBodyPart(r, w)
}

func (r *EmailBodyPart) Schema() string {
	return "{\"fields\":[{\"name\":\"PartId\",\"type\":\"string\"},{\"name\":\"MimeType\",\"type\":\"string\"},{\"name\":\"Filename\",\"type\":\"string\"},{\"name\":\"Body\",\"type\":\"string\"},{\"name\":\"Headers\",\"type\":{\"default\":{},\"type\":\"map\",\"values\":\"string\"}}],\"name\":\"EmailBodyPart\",\"type\":\"record\"}"
}

func (r *EmailBodyPart) SchemaName() string {
	return "EmailBodyPart"
}

func (_ *EmailBodyPart) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *EmailBodyPart) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *EmailBodyPart) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *EmailBodyPart) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *EmailBodyPart) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *EmailBodyPart) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *EmailBodyPart) SetString(v string)   { panic("Unsupported operation") }
func (_ *EmailBodyPart) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EmailBodyPart) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.PartId}
	case 1:
		return &types.String{Target: &r.MimeType}
	case 2:
		return &types.String{Target: &r.Filename}
	case 3:
		return &types.String{Target: &r.Body}
	case 4:
		r.Headers = make(map[string]string)

		return &MapStringWrapper{Target: &r.Headers}
	}
	panic("Unknown field index")
}

func (r *EmailBodyPart) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *EmailBodyPart) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *EmailBodyPart) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *EmailBodyPart) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *EmailBodyPart) Finalize()                        {}

func (_ *EmailBodyPart) AvroCRC64Fingerprint() []byte {
	return []byte(EmailBodyPartAvroCRC64Fingerprint)
}
